from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.models import create_task, get_user_tasks
from loader import dp
from aiogram.dispatcher.filters import Command

class TaskState(StatesGroup):
    title = State()
    comment = State()
    phone = State()
    urgency = State()
    photo = State()

@dp.message_handler(Command("start"))
async def start(msg: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏", "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞—è–≤–æ–∫.", reply_markup=kb)

@dp.message_handler(lambda msg: msg.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
async def new_task(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await TaskState.title.set()

@dp.message_handler(state=TaskState.title)
async def get_title(msg: types.Message, state: FSMContext):
    await state.update_data(title=msg.text)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    await TaskState.comment.set()

@dp.message_handler(state=TaskState.comment)
async def get_comment(msg: types.Message, state: FSMContext):
    await state.update_data(comment=msg.text)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await TaskState.phone.set()

@dp.message_handler(state=TaskState.phone)
async def get_phone(msg: types.Message, state: FSMContext):
    await state.update_data(phone=msg.text)
    kb = InlineKeyboardMarkup(row_width=3).add(
        InlineKeyboardButton("–ù–∏–∑–∫–∞—è", callback_data="urg_low"),
        InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è", callback_data="urg_medium"),
        InlineKeyboardButton("–í–∞–∂–Ω–∞—è", callback_data="urg_high")
    )
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏:", reply_markup=kb)
    await TaskState.urgency.set()

@dp.callback_query_handler(lambda c: c.data.startswith("urg_"), state=TaskState.urgency)
async def get_urgency(callback: types.CallbackQuery, state: FSMContext):
    urgency_map = {"urg_low": "–ù–∏–∑–∫–∞—è", "urg_medium": "–°—Ä–µ–¥–Ω—è—è", "urg_high": "–í–∞–∂–Ω–∞—è"}
    urgency = urgency_map[callback.data]
    await state.update_data(urgency=urgency)
    await callback.message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
    await TaskState.photo.set()

@dp.message_handler(commands=["skip"], state=TaskState.photo)
async def skip_photo(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    task_id = create_task(
        data["title"], data["comment"], data["phone"], data["urgency"],
        msg.from_user.id, msg.from_user.full_name
    )
    await msg.answer(f"–ó–∞–¥–∞—á–∞ #{task_id} —Å–æ–∑–¥–∞–Ω–∞!")
    await state.finish()

@dp.message_handler(content_types=types.ContentType.PHOTO, state=TaskState.photo)
async def get_photo(msg: types.Message, state: FSMContext):
    photo_id = msg.photo[-1].file_id
    await state.update_data(photo_id=photo_id)
    data = await state.get_data()
    task_id = create_task(
        data["title"], data["comment"], data["phone"], data["urgency"],
        msg.from_user.id, msg.from_user.full_name,
        photo_id=photo_id
    )
    await msg.answer(f"–ó–∞–¥–∞—á–∞ #{task_id} —Å–æ–∑–¥–∞–Ω–∞!")
    await state.finish()

@dp.message_handler(lambda msg: msg.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏")
async def view_tasks(msg: types.Message):
    tasks = get_user_tasks(msg.from_user.id)
    if not tasks:
        await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return
    for task in tasks:
        text = f"üìå –ó–∞–¥–∞—á–∞ #{task['id']}
–ù–∞–∑–≤–∞–Ω–∏–µ: {task['title']}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {task['comment']}
–¢–µ–ª–µ—Ñ–æ–Ω: {task['phone']}
–°—Ä–æ—á–Ω–æ—Å—Ç—å: {task['urgency']}
–°—Ç–∞—Ç—É—Å: {task['status']}"
        await msg.answer(text)